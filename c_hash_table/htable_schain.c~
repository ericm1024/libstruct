/* Copyright 2014 Eric Mueller
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* 
 * Eric Mueller
 * November 2014
 * htable_schain.c
 *
 * This is an implementation of a hash table using separate chaining.
 */

#include <assert.h>
#include "htable.h"
#include "../c_linked_list/llist.h"

#define INIT_TABLE_SIZE 7 /* small, arbitrary prime */

void* init_buckets()
{
    /* TODO: we are currently storing the array of linked lists an an array 
     * of pointers to linked lists. This means that a lot of indirection
     * has to happen before we can actually get to our data. In the future,
     * this should be changed to be an array of linked list heads and not
     * pointers to linked lists heads. This could easilly be fixed by
     * adding a c'tor to the linked list that takes a ptr to memory to
     * initialize instead of only having a c'tor that allocates its own
     * memory.
     */ 
    llist_head_t** buckets = malloc(sizeof(llist_head_t*) * INIT_TABLE_SIZE);

    if (!buckets) {
	return NULL;
    }

    size_t i;
    llist_head_t** bkt_ptr;
    for (i = 0,  bkt_ptr = buckets;
	 i < INIT_TABLE_SIZE; i++, bkt_ptr++){
	*bkt_ptr = llist_init(NULL); /* not giving it a deallocator */
	if (!bkt_ptr) {
	    goto error;
	}	
    }

    return buckets;
    
error:
    /* free everything we allocated before the failure */
    for (size_t j = 0; j <= i; j++){
	llist_destroy(buckets[j]);
    }
    free(buckets);
    return NULL;
}


htable_t* htable_init(hash_func_t hash)
{
    assert(hash);
    htable_t* ht = mallof(sizeof(htable_t));

    /* if the allocation failed, bail */
    if (!ht) {
	return NULL;
    }

    /* initialize the table */
    ht->size = INIT_TABLE_SIZE;
    ht->entries = 0;
    ht->hash = hash;
    ht->buckets = init_buckets();

    /* if init_buckets() failed, free ht, then, bail */
    if (!ht->buckets) {
	free(ht);
	return NULL;
    }
    
    return ht;
}

void htable_destroy(htable_t* ht)
{
    free_buckets(ht);
    free(ht);
}

int htable_insert(htable_t* ht, void* elem)
{
    if (need_resize
    size_t index = ht->hash(elem) % ht->size;
    return insert_at(ht,elem,index);
}

bool htable_exists(htable_t* ht, void* elem)
{
    return exists(ht, elem);
}

float load_factor(htable_t* ht)
{
    return ht->entries / (float)ht->size;
}
