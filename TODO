tests:
	The current testing is pretty good, but in general I think everything
	could use a few more tests that try as hard as they can to break the
	testee.

bugs:
	- hash table implementation does not shrink when it can
	- linked list is failing a test

issues:
	- posix memalign exists on OSX but it does not define the macros
	  that glibc does to denote that it exists, so the compile-time
	  test for it in htable.c fails even though it shouldn't.

in progress:
	btree
	
future structures:
	vetor
	skip list
	string
	heap
	counting filter
	trie (strings)
	radix tree (integers)

housekeeping:
	- clean up make files, put variables in top level make file, use
	  seperate build directory
	- write a make target that actually compiles the code as a shared
	  library (i.e. make the damn thing usable)
	- write a shell script to run tests.  

refactoring:
	- do a once over of all old code, particularly avl_tree. There
	  is some messy stuff in there. (also flist and list)
	- remove typdefs for structs, old style was better (i.e. revert to
	  always using struct foo instead of typedef'ing "struct foo" to
	  "foo_t" everywhere)
	- Change all structure initialization macros to set struct members
	  by name instead of by magic (i.e. {.foo = 1, .bar = 2}; instead of
	  {1,2};)